<?php

class DB
{
	
	// DBディレクトリ
	public $db_dir;
	
	// PDOオブジェクト
	public $pdo;
	
	
	//---------------------------------------------------------
	//  コンストラクタ
	//---------------------------------------------------------
	
	function __construct($data_dir)
	{
		
		// テンプレートディレクトリ名を定義
		$this->db_dir = $data_dir;
		
	}
	
	
	//---------------------------------------------------------
	//  DBに接続
	//---------------------------------------------------------
	
	function connect($db_file)
	{
		
		// PDOが使えない時は終了
		if(!class_exists('PDO')){exit("Server Error: Class 'PDO' is not found.");}
		
		// ディレクトリに書き込み出来ない時は終了
		elseif(!is_writable($this->db_dir)){exit("Directory Permission Error: '" . $this->db_dir . "' is not writable.");}
		
		// PDOでDBに接続
		$this->pdo = new PDO('sqlite:' . $this->db_dir . '/' . $db_file) or die("DB Connect Error: [$db_file]");
		
		// エラーモードを設定 ERRMODE_WARNING || ERRMODE_EXCEPTION
		$this->pdo->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);
		
	}
	
	
	//---------------------------------------------------------
	//  DBに追加接続
	//---------------------------------------------------------
	
	function attach($db_file,$a_name = 'at')
	{
		
		// DBファイル名を整形
		$db_file = $this->db_dir . '/' . $db_file;
		
		// SQLを定義
		$q = "attach '$db_file' as $a_name;";
		
		// DBにアタッチ
		try{$this->pdo->query($q);}
		
		// 例外が発生した時
		catch(PDOException $e){$this->exception($q);}
		
	}
	
	
	//---------------------------------------------------------
	//  DB追加接続を切断
	//---------------------------------------------------------
	
	function detach($a_name = 'at')
	{
		
		// DBにデタッチ
		$this->pdo->query("detach $a_name;");
		
	}
	
	
	//---------------------------------------------------------
	//  クエリー発行
	//---------------------------------------------------------
	
	function query($q)
	{
		
		// クエリーを発行
		return $this->pdo->query($q);
		
	}
	
	
	//---------------------------------------------------------
	//  レコードを取得
	//---------------------------------------------------------
	
	function fetch($r)
	{
		
		// 1行レコードを取得
		return $r->fetch(PDO::FETCH_ASSOC);
		
	}
	
	
	//---------------------------------------------------------
	//  クエリー発行＆レコードを取得
	//---------------------------------------------------------
	
	function query_fetch($q,$c = '')
	{
		
		// クエリーを発行
		$r = $this->pdo->query($q);
		
		// 1行レコードを取得
		$a = $r->fetch(PDO::FETCH_ASSOC);
		
		// カラム指定がある時は一部だけ返す
		if($a and $c){return $a[$c];}
		
		// カラム指定がない時は全て返す
		else{return $a;}
		
	}
	
	
	//---------------------------------------------------------
	//  クエリー発行
	//---------------------------------------------------------
	
	function prepare($q,$p = '')
	{
		
		// クエリーを発行
		$r = $this->pdo->prepare($q);
		
		// パラメータが無い時は終了
		if(!$p){return $r;}
		
		// パラメータを準備
		foreach($p as $key => $val){$r->bindParam(":$key",$$key);$$key = $val;}
		
		// SQLを実行
		return $r->execute();
		
	}
	
	
	//---------------------------------------------------------
	//  レコード取得をリセット
	//---------------------------------------------------------
	
	function reset($r)
	{
		
		// レコード取得をリセット
		return $r->closeCursor();
		
	}
	
	
	//---------------------------------------------------------
	//  DB接続を解除
	//---------------------------------------------------------
	
	function close()
	{
		
		// 接続を解除
		return $this->pdo = null;
		
	}
	
	
	//---------------------------------------------------------
	//  トランザクション開始
	//---------------------------------------------------------
	
	function begin($mode = 'exclusive')
	{
		
		// SQLを定義  immediate || exclusive
		$q = 'begin ' . $mode . ';';
		
		// トランザクション開始
		try{$this->pdo->query($q);}
		
		// 例外が発生した時
		catch(PDOException $e){$this->exception($q);}
		
	}
	
	
	//---------------------------------------------------------
	//  コミット
	//---------------------------------------------------------
	
	function commit()
	{
		
		// コミット
		return $this->pdo->query('commit;');
		
	}
	
	
	//---------------------------------------------------------
	//  ロールバック
	//---------------------------------------------------------
	
	function rollback()
	{
		
		// ロールバック
		return $this->pdo->query('rollback;');
		
	}
	
	
	//---------------------------------------------------------
	//  エラーメッセージの取得
	//---------------------------------------------------------
	
	function error()
	{
		
		// エラーメッセージを取得
		return $this->pdo->errorInfo();
		
	}
	
	
	//---------------------------------------------------------
	//  全テーブル名の取得
	//---------------------------------------------------------
	
	function tables($opt = false)
	{
		
		// 変数を初期化
		$t = array();
		
		// SQL文を定義
		$q = "select name from sqlite_master where type='table';";
		
		// SQLを実行
		$r = $this->pdo->query($q);
		
		// 実行結果を配列に格納
		while($a = $r->fetch(PDO::FETCH_ASSOC)){array_push($t,current($a));}
		
		// オプションがtrueの時はキーと値を反転
		if($opt){$t = array_flip($t);}
		
		// テーブルリストを返す
		return $t;
		
	}
	
	
	//---------------------------------------------------------
	//  レコード総数の取得
	//---------------------------------------------------------
	
	function rows($r)
	{
		
		// 総数を取得
		return $r->rowCount();
		
	}
	
	
	//---------------------------------------------------------
	//  SQL文のエスケープ
	//---------------------------------------------------------
	
	function escape($s)
	{
		
		// 文字列をエスケープ
		return $this->pdo->quote($s);
		
	}
	
	
	//---------------------------------------------------------
	//  SQLiteバージョンの取得
	//---------------------------------------------------------
	
	function version()
	{
		
		// バージョンを取得
		return $this->pdo->getAttribute(PDO::ATTR_SERVER_VERSION);
		
	}
	
	
	//---------------------------------------------------------
	//  DBファイルが存在するかチェック
	//---------------------------------------------------------
	
	function exists($db_file)
	{
		
		// DBファイル名を整形
		$db_file = $this->db_dir . '/' . $db_file;
		
		// DBファイルが存在しない時はfalseを返す
		if(!file_exists($db_file) or !filesize($db_file)){return false;}
		
		// DBデータが存在する時はtrueを返す
		else{return true;}
		
	}
	
	
	//---------------------------------------------------------
	//  例外発生時の処理
	//---------------------------------------------------------
	
	function exception($q)
	{
		
		// リトライ回数を設定
		$retry = 5;
		
		// 待ち時間を設定
		$wait = 1;
		
		// リトライループ
		for($i = 1;;$i++)
		{
			
			// 指定秒数待つ
			sleep($wait);
			
			// SQL実行
			try{$this->pdo->query($q);break;}
			
			// リトライ回数に達した時は終了
			catch(PDOException $e){if($i === $retry){exit;}}
			
		}
		
	}
	
}

